'@Ignore OptionExplicit
'@IgnoreModule UndeclaredVariable, OptionExplicit, ParameterCanBeByVal
'@Folder("Таблетки")

Public Function GetDateShift(Target As Range) As Integer
    ' Значение по умолчанию GetDateShift = 0

    ' Проверяем, что изменение произошло в первом столбце, за исключением первой строки ("Сегодня")
    ' и затронута только одна ячейка с символами "-" или "+"
    If Target.Column = 1 And _
       Target.Row <> 1 And _
       Target.Cells.count = 1 Then
        If (Target.Value = "-" Or Target.Value = "+") Then
        
            ' Определяем величину сдвига с помощью IIf
            GetDateShift = IIf(Target.Value = "+", 1, -1)
        
            ' Отменяем текущее изменение для сохранения исходной даты
            Application.Undo
        End If
    End If
End Function

Public Sub DateShift(cell As Range, shift As Integer)
    If shift = 0 Then Exit Sub  ' Выход, если сдвиг равен 0

' BUG: не работает поиск свободной даты

    Dim newDate As Date
    Dim Medicine As String
    
    newDate = cell + shift          ' Начальная новая дата
    Medicine = cell.Offset(0, 1).Value ' Лекарство из второго столбца

    ' Начинаем цикл поиска свободной даты
    Do
        ' Если дата не найдена в списке или найдена, но не для этого лекарства
        If WorksheetFunction.CountIf(Range("A:A"), newDate) = 0 Then
            Exit Do                     ' Даты нет, выходим из цикла
        ElseIf WorksheetFunction.CountIfs(Range("A:A"), newDate, Range("B:B"), Medicine) = 0 Then
            Exit Do                     ' Дата есть, лекарства нет
        Else
            newDate = newDate + shift   ' Переход на следующую дату в направлении shift
        End If
    Loop
    
    ' Присваиваем Target новую свободную дату
    cell.Value = newDate

    ' Сортировка по дате после изменения значения
    sortByDate

End Sub



Private Sub Worksheet_Change(ByVal Target As Range)
    ' +/- (+Enter) на дате сдвигает сдвигает текущую строку вперед или назад на день или больше
    ' больше, если в следующий день уже есть это лекарство
    DateShift Target, GetDateShift(Target)
'    ' Сортировка по дате после изменения значения
'    sortByDate

'    ' Применение условного форматирования после изменений
'    ApplyConditionalFormatting
End Sub


'@Ignore ProcedureCanBeWrittenAsFunction
Private Sub Worksheet_BeforeDoubleClick(ByVal Target As Range, Cancel As Boolean)
    Dim newRow As Long
'    Dim CurrentRow As Long
    

    If (Target.Column = 2 Or Target.Column = 1) And Target.Row > 1 Then
        Application.ScreenUpdating = False
        ' Отменяем стандартное действие двойного щелчка
        Cancel = True
        newRow = TodayRowNumber.Value + 1
        ' Копируем строку и вставляем её после строки Сегодня
        ' Если строки Сегодня нет, то между ближайшими датами до и после Сегодня
        If Target.Column = 2 Then
            If Cells(Target.Row, 1).Value = Date Then
                DosageSchedule
            Else
                CopyFromTo Target.Row, newRow
            End If
        Else
            CopyFromTo TotalRows.Value, newRow
        End If
        Application.ScreenUpdating = True
        Application.Goto Me.Cells(newRow, 1)     ', True
    End If


End Sub

Sub CopyFromTo(from As Long, into As Long, Optional newDate As Date = 0)
    ' Если newDate не передан, устанавливаем сегодняшнюю дату
    If newDate = 0 Then newDate = Date
    
    ' Копируем строку from
    Rows(from).Copy
    
    ' Вставляем новую строку перед строкой into
    Rows(into).Insert shift:=xlDown
    
    ' Очищаем режим копирования
    Application.CutCopyMode = False
    
    ' Устанавливаем новую дату в первую ячейку вставленной строки
    Cells(into, 1).Value = newDate
End Sub


Sub DosageSchedule()

    PillHandlingForm.Show
End Sub




Public Sub AddDoseSchedule(singleRecord As SingleDoseRecord, _
                           duration As Integer, RepeatDays As Integer)
    Dim ws As Worksheet
    Dim firstRow As Long
    Dim lastRow As Long
    Dim startTime As Single
    Dim endTime As Single
    Dim i As Integer

    ' Фиксируем время начала выполнения процедуры
    startTime = Timer
    Debug.Print "Процедура началась: " & Format(Now, "hh:mm:ss")
    
    ' Определяем первую и последнюю строки для записи данных
    firstRow = TotalRows + 1
    lastRow = TotalRows + duration

    ' ----------------------------------------------------------------------
    ' Важно! Присвоение диапазону через массив для ускорения работы:
    '
    ' - В данном коде используется техника присвоения значений диапазону с помощью массива Variant.
    '   Это делается для повышения производительности при записи большого объема данных в ячейки Excel.
    '   Работа с массивами в VBA значительно быстрее, чем запись данных в ячейки по одной, особенно
    '   когда речь идет о множественных строках и столбцах.
    '
    ' - Присваивание значений диапазону по одной ячейке за раз влечет за собой множество операций с ячейками,
    '   что может значительно замедлить выполнение макроса. В отличие от этого, при записи данных через массив
    '   вся информация сначала собирается в памяти и затем записывается в диапазон одной операцией. Это минимизирует
    '   количество обращений к объекту Worksheet и значительно ускоряет выполнение.
    '
    ' - Процесс заключается в следующем: данные (значения и формулы) для каждой строки собираются в массив,
    '   где каждая строка массива соответствует одной строке на листе. Далее массив присваивается диапазону ячеек
    '   через свойство `.Value`. Это позволяет избежать множества отдельных операций с ячейками, делая процесс
    '   записи более эффективным.
    '
    ' - В данном случае создается двумерный массив, в котором строки соответствуют данным для каждой записи,
    '   а столбцы - значениям для каждого поля записи (например, дата, дозировка, утренний прием и т.д.).
    '   После того как массив заполнен, его значения сразу присваиваются диапазону в Excel через
    '   `Cells(firstRow, 1).Resize(Duration, 12).Value = outputArray`.
    '
    ' - Эта техника особенно полезна, когда необходимо записать значительное количество данных,
    '   а также когда нужно записывать как значения, так и формулы в одну операцию, что минимизирует
    '   время выполнения макроса.
    ' ----------------------------------------------------------------------


    ' Подготовка данных для записи в диапазон
    Dim outputArray() As Variant
    ReDim outputArray(1 To duration, 1 To 12)

    ' Формируем массив записей
    For i = 1 To duration
        Dim currentRow As Integer
        currentRow = i
        
        ' 1-7: основные данные
        outputArray(currentRow, 1) = singleRecord.DateScheduled + (i - 1) * RepeatDays ' Дата
        outputArray(currentRow, 2) = singleRecord.Medicine ' Название лекарства
        outputArray(currentRow, 3) = singleRecord.Dosage ' Дозировка
        outputArray(currentRow, 4) = singleRecord.Morning ' Утро
        outputArray(currentRow, 5) = singleRecord.Afternoon ' День
        outputArray(currentRow, 6) = singleRecord.Evening ' Вечер
        outputArray(currentRow, 7) = singleRecord.Night ' Ночь

        ' 8: формула "Общее за день"
        outputArray(currentRow, 8) = "=SUM(RC[-4]:RC[-1])"

        ' 9: оставляем пусто, чтобы позже записать массив формул
        outputArray(currentRow, 9) = 0

        ' 10: класс
        outputArray(currentRow, 10) = singleRecord.Class

        ' 11: закупка (если InStock = False, оставить пусто)
        If singleRecord.InStock Then
            outputArray(currentRow, 11) = ""
        Else
            outputArray(currentRow, 11) = "=RC[-3]"
        End If

        ' 12: примечания
        outputArray(currentRow, 12) = singleRecord.Notes
    Next i
    
    ' Проходим по массиву и заменяем 0 на пустую строку ("") в столбцах 4, 5, 6 и 7
    Dim j As Integer
    For i = 1 To duration
        For j = 4 To 7
            If outputArray(i, j) = 0 Then
                outputArray(i, j) = ""
            End If
        Next j
    Next i


    ' Записываем данные в диапазон за один раз
    Dim dataRange As Range
    Set dataRange = Cells(firstRow, 1).Resize(duration, 12)
    dataRange.Value = outputArray

    ' Формируем массив формул для 9-го столбца
    Dim formulaArray() As Variant
    ReDim formulaArray(1 To duration, 1 To 1)
    For i = 1 To duration
        formulaArray(i, 1) = "=SUMIF(R2C2:RC2,RC2,R2C11:RC11)-SUMIF(R2C2:RC2,RC2,R2C8:RC8)"
    Next i

    ' Записываем массив формул в 9-й столбец
    dataRange.Columns(9).FormulaR1C1 = formulaArray

    ' ----------------------------------------------------------------------
    ' Важно! Столбец 9 (Остаток) обрабатывается отдельно, так как:
    '
    ' - В 8 столбце формулы используют относительные ссылки (например, RC[-4]:RC[-1]),
    '   которые корректно работают при записи значений в массив и присвоении этих значений диапазону.
    ' - Однако для 9-го столбца, где используется более сложная формула с ссылками на другие строки,
    '   возможны проблемы при присвоении формулы через массив Variant. Excel пытается адаптировать
    '   ссылки для каждой ячейки, что приводит к некорректной интерпретации диапазонов и ссылок.
    '   Это может нарушить логику формулы, так как ссылки на диапазоны могут быть неправильно сдвинуты
    '   или заменены.
    '
    ' - Формулы, которые работают только с данными текущей строки и не обращаются к другим строкам,
    '   (например, просто суммируя соседние ячейки) записываются корректно через массив Variant.
    '   Однако когда формула зависит от других строк (как в случае с 9-м столбцом), необходимо
    '   использовать другой подход для корректной записи формул.
    '
    ' - Чтобы избежать подобных проблем и сохранить правильную логику формул, для 9-го столбца
    '   мы записываем формулы отдельно с использованием свойства `FormulaR1C1`, что позволяет
    '   точно настроить относительные ссылки в каждой строке и избежать ошибок при вычислениях.
    ' ----------------------------------------------------------------------


    sortByDate
    ' Фиксируем время завершения процедуры
    endTime = Timer
    Debug.Print "Процедура завершилась: " & Format(Now, "hh:mm:ss")
    Debug.Print "Время выполнения (сек): " & Round(endTime - startTime, 2) & vbCrLf
End Sub




Public Sub AddEmptyString(from As Integer, into As Integer)
' BUG: раскрашивает 1 столбец на всех листах, откуда выполняется макрос, в зеленый
    Application.ScreenUpdating = False
    With MedicationLog
        .Rows(from).Copy
        .Rows(into).Insert
        Application.CutCopyMode = xlCopy
        .Cells(into, 1) = .Cells(from, 1)
        '@Ignore UseMeaningfulName
        For i = 2 To TotalColumns
            If Not .Cells(into, i).HasFormula Then .Cells(into, i).Clear
        Next i
    End With
    Application.ScreenUpdating = True
End Sub

Public Sub AddEmptyStringToTheEnd()
    With MedicationLog
        AddEmptyString 2, TotalRows + 1
        .Cells(TotalRows, 1) = .Cells(TotalRows - 1, 1) + 1
    End With
End Sub


Public Sub FilterByCellValue()
    Dim currentRow As Long
    currentRow = ActiveCell.Row
    
    Dim targetValue As Variant
    targetValue = Cells(currentRow, 2).Value
    
    ActiveSheet.UsedRange.AutoFilter Field:=2, Criteria1:=targetValue
End Sub

Public Sub ResetFilterAndSetCellFromToday()
    ' Отменяем фильтр
    ActiveSheet.AutoFilterMode = False
    
    ' Находим текущую дату в первой колонке (предполагая, что даты находятся в формате "dd.mm.yy")
    Dim todayDate As String
    todayDate = Format$(Date, "dd.mm.yy")
    
    Dim foundCell As Range
    On Error Resume Next
    Set foundCell = Columns(1).Find(What:=todayDate, LookIn:=xlValues, LookAt:=xlWhole)
    On Error GoTo 0
    
    ' Если дата найдена, устанавливаем текущую ячейку на вторую ячейку найденного ряда
    If Not foundCell Is Nothing Then
        foundCell.Offset(0, 1).Select
        foundCell.Offset(0, 1).Application.Goto Reference:=foundCell.Offset(0, 1), Scroll:=True
    End If
End Sub

Public Sub FilterOrResetAndSetCell()
    If ActiveSheet.AutoFilterMode Then
        ResetFilterAndSetCellFromToday
    Else
        FilterByCellValue
    End If
End Sub


Public Sub sortByDate()
    ' Отключаем обновление экрана для ускорения выполнения и предотвращения мигания экрана
    Application.ScreenUpdating = False

    ' Сортировка по первому столбцу именованного диапазона MainLog
    With ActiveSheet.Sort
        .SortFields.Clear
        .SortFields.Add Key:=MainLog.Columns(1), Order:=xlAscending
        .SetRange MainLog
        .Header = xlYes
        .Apply
    End With

    ' Включаем обновление экрана
    Application.ScreenUpdating = True

    ' Выбираем строку с сегодняшней датой
    Cells(TodayRowNumber, 1).Select
End Sub


Public Sub ApplyConditionalFormatting()
    ' Установить активный лист
    With ActiveSheet
    
        ' Удалить все правила условного форматирования на листе
        .Cells.FormatConditions.Delete
    
        ' Применение всех правил к диапазону firstColRange
        With .Columns(1)
            ' Правило 1: Если суббота, выделить светло-зеленым
            .FormatConditions.Add Type:=xlExpression, Formula1:="=ДЕНЬНЕД(RC;2)=6"
            With .FormatConditions(.FormatConditions.count)
                .Interior.Color = RGB(226, 239, 218)
                .StopIfTrue = False
            End With
        
            ' Правило 2: Если воскресенье, выделить светло-светло-зеленым
            .FormatConditions.Add Type:=xlExpression, Formula1:="=ДЕНЬНЕД(RC;2)=7"
            With .FormatConditions(.FormatConditions.count)
                .Interior.Color = RGB(198, 224, 180)
                .StopIfTrue = False
            End With
            
            ' Правило 3: Если дата повторяется - текст серый
            .FormatConditions.Add Type:=xlExpression, Formula1:="=RC=R[-1]C"
            With .FormatConditions(.FormatConditions.count)
                .Font.Color = RGB(150, 150, 150)
                .StopIfTrue = False
            End With
        End With
        
        With .Columns(9)
            ' Правило 4: Если значение в колонке 9 (I) меньше 0
            .FormatConditions.Add Type:=xlExpression, Formula1:="= RC<0"
            With .FormatConditions(.FormatConditions.count)
                .Font.Color = RGB(255, 0, 0)
                .Interior.Color = RGB(255, 255, 0)
                .StopIfTrue = False
            End With
        End With
    
        With .Range(.Columns(1), .Columns(12))
            ' Правило 5: нарисовать границы внутри и снаружи строк Сегодня и выделить жирным шрифтом
            .FormatConditions.Add Type:=xlExpression, Formula1:="=RC1=СЕГОДНЯ()"
            With .FormatConditions(.FormatConditions.count)
                With .Borders
                    .LineStyle = xlContinuous
                    .Color = RGB(0, 0, 0)        ' Черный цвет границ
                    .Weight = xlThin             ' Тонкая граница
                End With
                .Font.Bold = True
                .StopIfTrue = False
            End With
        End With
        
        With .Range(.Columns(1), .Columns(12))
            ' Получаем значение из столбца 2 активной строки
            newFormula = "=RC2=""" & Cells(ActiveCell.Row, 2).Value & """"
            ' Добавляем новое правило
            With .FormatConditions.Add(Type:=xlExpression, Formula1:=newFormula)
                ' Настройка рамок
                With .Borders
                    .LineStyle = xlContinuous
                    .Color = RGB(150, 150, 150)  ' Тонкий, чуть более тёмный серый цвет рамки
                    .Weight = xlThin
                End With
                .Interior.Color = RGB(230, 230, 230) ' Серый оттенок
                .StopIfTrue = False
            End With
        End With
        
        
    End With
    
End Sub

Public Sub MyMacro()
    On Error GoTo ErrHandler
    MsgBox "Hello from the custom context menu!"
    Exit Sub
ErrHandler:
    MsgBox "Error: " & Err.Description
End Sub


Private Sub Worksheet_SelectionChange(ByVal Target As Range)
    Static PreviousSelection As Range

    ' Отключаем обновление экрана для уменьшения мигания
    Application.ScreenUpdating = False
    
    ' Инициализация переменной при первом вызове
    If PreviousSelection Is Nothing Then
        Set PreviousSelection = Target
    End If

    ' Если выделение изменилось, обновляем форматирование
    If PreviousSelection.Address <> Target.Address Then
        Call ApplyConditionalFormatting
        Set PreviousSelection = Target
    End If

    ' Включаем обновление экрана
    Application.ScreenUpdating = True
End Sub
